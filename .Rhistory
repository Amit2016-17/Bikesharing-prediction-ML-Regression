yVal <- data.matrix(bikeVal[c(115)])
XtXtrain<- (t(xTrain))%*%xTrain;
wMAP_k= (ginv(XtXtrain+(lambda*Ide)))%*%((lambda*mw)+((t(xTrain))*yTrain));
ymap_est<- xVal%*%wMAP_k;
MSE_map_k <- mse(ymap_est,yVal);
if (MSE_map_k<p_error) {
wMAP=wMAP_k;
p_error= MSE_map_k
}
}
}
lambda*Ide
XtXtrain+(lambda*Ide)
nrows(XtXtrain)
nrow(XtXtrain)
ncol(xTrain)
Ide <- matrix(0, ncol(xTrain), ncol(xTrain))
diag(Ide) <- 1
View(Ide)
View(Ide)
tic("MAP time")
tic("MAP time")
Ide <- matrix(0, ncol(xTrain), ncol(xTrain))
diag(Ide) <- 1
p_error<- 100000;
for (i in 1:10){
for (k in 1:100){
mw= 0.01*k;
tausq= 0.1*i;
lambda = mw/tausq;
set.seed(k*(i+100))
trainIndex <- createDataPartition(bikeTrV$cnt, p = .8,
list = FALSE,
times = 1)
bikeTrain <- bikeTrV[ trainIndex,]
bikeVal  <- bikeTrV[-trainIndex,]
xTrain <- data.matrix(bikeTrain[-c(115)])
xVal <- data.matrix(bikeVal[-c(115)])
yTrain <- data.matrix(bikeTrain[c(115)])
yVal <- data.matrix(bikeVal[c(115)])
XtXtrain<- (t(xTrain))%*%xTrain;
wMAP_k= (ginv(XtXtrain+(lambda*Ide)))%*%((lambda*mw)+((t(xTrain))*yTrain));
ymap_est<- xVal%*%wMAP_k;
MSE_map_k <- mse(ymap_est,yVal);
if (MSE_map_k<p_error) {
wMAP=wMAP_k;
p_error= MSE_map_k
}
}
}
tic("MAP time")
Ide <- matrix(0, ncol(xTrain), ncol(xTrain))
diag(Ide) <- 1
p_error<- 100000;
for (i in 1:10){
for (k in 1:100){
mw= 0.01*k;
tausq= 0.1*i;
lambda = mw/tausq;
set.seed(k*(i+100))
trainIndex <- createDataPartition(bikeTrV$cnt, p = .8,
list = FALSE,
times = 1)
bikeTrain <- bikeTrV[ trainIndex,]
bikeVal  <- bikeTrV[-trainIndex,]
xTrain <- data.matrix(bikeTrain[-c(115)])
xVal <- data.matrix(bikeVal[-c(115)])
yTrain <- data.matrix(bikeTrain[c(115)])
yVal <- data.matrix(bikeVal[c(115)])
XtXtrain<- (t(xTrain))%*%xTrain;
wMAP_k= (ginv(XtXtrain+(lambda*Ide)))%*%((lambda*mw)+((t(xTrain))%*%yTrain));
ymap_est<- xVal%*%wMAP_k;
MSE_map_k <- mse(ymap_est,yVal);
if (MSE_map_k<p_error) {
wMAP=wMAP_k;
p_error= MSE_map_k
}
}
}
toc()
ymle_est<- 10^(ymle_est)-1
ymap_est<- 10^(ymap_est)-1
MAP_MSE= mse(ymap_est,yTest)
ymap_est= xTest%*%wMAP;
ymap_est<- 10^(ymap_est)-1
MAP_MSE= mse(ymap_est,yTest)
MLE_MSE= mse(ymle_est,yTest)
testresults <- data.frame(yTest, ymle_est, ymap_est)
names(testresults) <- c("yTest", "ymle_est", "ymap_est")
testresults$MLEerror <- abs(testresults$ymle_est-testresults$yTest)
testresults$MAPerror <- abs(testresults$ymap_est-testresults$yTest)
meanMLEerror<- mean(testresults$MLEerror)
medianMLEerror<- median(testresults$MLEerror)
meanMAPerror<- mean(testresults$MAPerror)
medianMAPerror<- median(testresults$MAPerror)
ggplot(testresults,aes(ymap_est,yTest))+
geom_point(alpha=0.27, color='orange')+
geom_smooth(method='lm')
source('~/Machine Learning/Bikesharing-prediction-ML-Regression/Bike regression script.R', echo=TRUE)
View(ymap_est)
ggplot(testresults,aes(ymle_est,yTest))+
geom_point(alpha=0.27, color='violet')+
geom_smooth(method='lm')
ggplot(testresults,aes(ymap_est,yTest))+
geom_point(alpha=0.27, color='orange')+
geom_smooth(method='lm')
source('~/Machine Learning/Bikesharing-prediction-ML-Regression/Bike regression script.R', echo=TRUE)
View(testresults)
View(testresults)
i=1:100
ytest_sub=yTest[i]
ymle_sub=ymle_est[i]
ymap_sub=ymap_est[i]
subset = data.frame(ytest_sub, ymle_sub, ymap_sub)
subset = data.frame(i,ytest_sub, ymle_sub, ymap_sub)
ggplot(testresults,aes(i,yTest))+
geom_line()
ggplot(subset,aes(i,ytest_sub))+
geom_line()
ggplot(subset,aes(i,ymle_sub), new=TRUE)+
geom_line(color= 'red')
ggplot(subset,aes(i,ytest_sub))+
geom_line()
ggplot(subset,aes(i,ymle_sub), new=TRUE)+
geom_line(color= 'red')
i=1:100
ytest_sub=yTest[i]
ymle_sub=ymle_est[i]
ymap_sub=ymap_est[i]
subsettest = data.frame(i,ytest_sub)
subsetmle = data.frame(i,ymle_sub)
subsetmap = data.frame(i,ymap_sub)
ggplot(subsettest,aes(i,ytest_sub))+
geom_line()+
geom_line(data= subsetmle, color= 'red')+
geom_line(data= subsetmap, color= 'blue')
ggplot(subsettest,aes(i,ytest_sub))+
geom_line()+
geom_line(data= subsetmle, color= 'red')+
geom_line(data= subsetmap, color= 'blue')
ggplot(subsettest,aes(i,ytest_sub))+
geom_line()
geom_line(data= subsetmle, color= 'red')+
geom_line(data= subsetmap, color= 'blue')
ggplot(subsettest,aes(i,ytest_sub))+
geom_line()+
geom_line(data= subsetmle, color= 'red', new= TRUE)+
geom_line(data= subsetmap, color= 'blue')
ggplot(subsettest,aes(i,ytest_sub))+
geom_line()+
geom_line(data= subsetmle, color= 'red')
map<-c(1 2 3)
map<-c(1, 2,3)
i=1:100
ytest_sub=yTest[i]
ymle_sub=ymle_est[i]
ymap_sub=ymap_est[i]
df <- data.frame(ytest_sub, ymle_sub, ymap_sub, i)
df.plot <- df %>%
gather(results, value, -c("i"))
library(dplyr)
i=1:100
ytest_sub=yTest[i]
ymle_sub=ymle_est[i]
ymap_sub=ymap_est[i]
df <- data.frame(ytest_sub, ymle_sub, ymap_sub, i)
df.plot <- df %>%
gather(results, value, -c("i"))
library(tidyr)
i=1:100
ytest_sub=yTest[i]
ymle_sub=ymle_est[i]
ymap_sub=ymap_est[i]
df <- data.frame(ytest_sub, ymle_sub, ymap_sub, i)
df.plot <- df %>%
gather(results, value, -c("i"))
ggplot(df.plot, aes(x=i, y=value, color=results)) +
geom_point()
ggplot(df.plot, aes(x=i, y=value, color=results)) +
geom_line()
i=1:50
ytest_sub=yTest[i]
ymap_sub=ymap_est[i]
ymle_sub=ymle_est[i]
df <- data.frame(ytest_sub, ymle_sub, ymap_sub, i)
df.plot <- df %>%
gather(results, value, -c("i"))
ggplot(df.plot, aes(x=i, y=value, color=results)) +
geom_line()
ggplot(df.plot, aes(x=i, y=value, color=results), size=2) +
geom_line()
ggplot(df.plot, aes(x=i, y=value, color=results), size=5) +
geom_line()
ggplot(df.plot, aes(x=i, y=value, color=results)) +
geom_line( size=5)
ggplot(df.plot, aes(x=i, y=value, color=results)) +
geom_line( size=2)
ggplot(df.plot, aes(x=i, y=value, color=results)) +
geom_line( size=1.5)
ggplot(df.plot, aes(x=i, y=value, color=results)) +
geom_line( size=1.5)
ggplot(df.plot, aes(x=i, y=value, color=results)) +
geom_line( size=1)
i=1:150
ytest_sub=yTest[i]
ymle_sub=ymle_est[i]
ymap_sub=ymap_est[i]
df <- data.frame(ytest_sub, ymle_sub, ymap_sub, i)
ggplot(df.plot, aes(x=i, y=value, color=results)) +
geom_line( size=1.2)
df.plot <- df %>%
gather(results, value, -c("i"))
i=1:150
ytest_sub=yTest[i]
ymle_sub=ymle_est[i]
ymap_sub=ymap_est[i]
df <- data.frame(ytest_sub, ymle_sub, ymap_sub, i)
df.plot <- df %>%
gather(results, value, -c("i"))
ggplot(df.plot, aes(x=i, y=value, color=results)) +
geom_line( size=1.2)
i=1:100
ytest_sub=yTest[i]
ymle_sub=ymle_est[i]
ymap_sub=ymap_est[i]
df.plot <- df %>%
gather(results, value, -c("i"))
df <- data.frame(ytest_sub, ymle_sub, ymap_sub, i)
ggplot(df.plot, aes(x=i, y=value, color=results)) +
geom_line( size=1.1)
i=1:100
ytest_s=yTest[i]
ymle_s=ymle_est[i]
ymap_s=ymap_est[i]
df <- data.frame(ytest_s, ymle_s, ymap_s, i)
df.plot <- df %>%
gather(results, value, -c("i"))
ggplot(df.plot, aes(x=i, y=value, color=results)) +
geom_line( size=0.9)
df <- data.frame(ytest_s, ymle_s, ymap_s, i)
df.plot <- df %>%
gather(predictions, value, -c("i"))
ggplot(df.plot, aes(x=i, y=value, color=results)) +
geom_line( size=0.9)
df.plot <- df %>%
gather(predictions, value, -c("i"))
ggplot(df.plot, aes(x=i, y=value, color=predictions)) +
geom_line( size=0.9)
cor(yTest,ymle_est)
cor(yTest,ymap_est)
MAP_MSE= mse(ymap_est,yTest)
MLE_MSE= mse(ymle_est,yTest)
MAP_correlation= cor(yTest,ymap_est)
MLE_correlation= cor(yTest,ymle_est)
testresults <- data.frame(yTest, ymle_est, ymap_est)
names(testresults) <- c("yTest", "ymle_est", "ymap_est")
testresults$MLEerror <- abs(testresults$ymle_est-testresults$yTest)
testresults$MAPerror <- abs(testresults$ymap_est-testresults$yTest)
meanMLEerror<- mean(testresults$MLEerror)
medianMLEerror<- median(testresults$MLEerror)
meanMAPerror<- mean(testresults$MAPerror)
medianMAPerror<- median(testresults$MAPerror)
ggplot(testresults,aes(ymle_est,yTest))+
geom_point(alpha=0.27, color='violet')+
geom_smooth(method='lm')
ggplot(testresults,aes(ymap_est,yTest))+
geom_point(alpha=0.27, color='orange')+
geom_smooth(method='lm')
i=1:100
ytest_s=yTest[i]
ymle_s=ymle_est[i]
ymap_s=ymap_est[i]
df <- data.frame(ytest_s, ymle_s, ymap_s, i)
ggplot(df.plot, aes(x=i, y=value, color=predictions)) +
geom_line( size=0.9)
df.plot <- df %>%
gather(predictions, value, -c("i"))
R2map <- 1 - (sum((yTest-ymap_est )^2)/sum((yTest-mean(yTest))^2))
R2mle <- 1 - (sum((yTest-ymle_est )^2)/sum((yTest-mean(yTest))^2))
# Machine learning Regression project-predicting bike usage- Nadir Nibras
# clear workspace variables
rm(list = ls());
# it means ctrl+L. clear window
cat("\014")
# close all plots
graphics.off()
library(MASS)
library(readr)
library(datasets)
library(ggplot2)
library(ggExtra)
library(rstudioapi)
library(corrplot)
library(Metrics)
library(dplyr)
library(tidyr)
library(caret)
library(tictoc)
# set directory to R script folder
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
# load datasets
rawData<- read_csv("hour.csv")
# Pre-processing data -----------------------------------------------------
processedData<-rawData
processedData$weeknum<-week(processedData$dteday)
processedData$dteday<- NULL
processedData<-processedData[,c(1,17,2:16)]
# one hot encoding with loop
for(i in unique(processedData$season)) {
processedData[[paste0("season_",i)]] <- ifelse(processedData$season==i,1,0)
}
for(i in unique(processedData$weekday)) {
processedData[[paste0("weekday_",i)]] <- ifelse(processedData$weekday==i,1,0)
}
for(i in unique(processedData$weathersit)) {
processedData[[paste0("weathersit_",i)]] <- ifelse(processedData$weathersit==i,1,0)
}
for(i in unique(processedData$mnth)) {
processedData[[paste0("mnth_",i)]] <- ifelse(processedData$mnth==i,1,0)
}
for(i in unique(processedData$hr)) {
processedData[[paste0("hour_",i)]] <- ifelse(processedData$hr==i,1,0)
}
for(i in unique(processedData$weekday)) {
processedData[[paste0("weekday_",i)]] <- ifelse(processedData$weekday==i,1,0)
}
for(i in unique(processedData$weeknum)) {
processedData[[paste0("weeknum_",i)]] <- ifelse(processedData$weeknum==i,1,0)
}
# Fix cyclic variables
processedData$weeknum<-pmin(abs(3-processedData$weeknum),56-processedData$weeknum);
processedData$mnth<-pmin(abs(1-processedData$mnth),13-processedData$mnth);
processedData$hr<-pmin(abs(4-processedData$hr),28-processedData$hr);
# Min-max normalization
processedData$weeknum<-processedData$weeknum/max(processedData$weeknum)
processedData$mnth<-processedData$mnth/max(processedData$mnth)
processedData$hr<- processedData$hr/max(processedData$hr)
# move count to end
processedData<- processedData[c(1:16, 18:121,17)]
# remove excessive columns
processedData<- processedData[-c(1,3,8,10,15,16)]
processedData$cnt <- log10(processedData$cnt+1)
set.seed(111)
trainIndex <- createDataPartition(processedData$cnt, p = .9, list = FALSE, times = 1)
bikeTrV <- processedData[ trainIndex,]
bikeTest  <- processedData[-trainIndex,]
xTest <- data.matrix(bikeTest[-c(115)])
yTest <- data.matrix(bikeTest[c(115)])
p_error<- 100000;
tic("MLE time")
xTrain<- bikeTrV(-c[115])
yTrain<- bikeTrv(c[115])
XtXtrain<- (t(xTrain))%*%xTrain;
wMLE <- (ginv(XtXtrain))%*%(t(xTrain))%*%yTrain;
ymle_est= xTest%*%wMLE;
toc()
ymle_est<- 10^(ymle_est)-1
yTest<- 10^(yTest)-1
MLE_MSE= mse(ymle_est,yTest)
ymle_est= xTest%*%wMLE;
wMLE <- (ginv(XtXtrain))%*%(t(xTrain))%*%yTrain;
xTrain<- bikeTrV(-c[115])
set.seed(111)
trainIndex <- createDataPartition(processedData$cnt, p = .9, list = FALSE, times = 1)
bikeTrV <- processedData[ trainIndex,]
bikeTest  <- processedData[-trainIndex,]
xTest <- data.matrix(bikeTest[-c(115)])
yTest <- data.matrix(bikeTest[c(115)])
p_error<- 100000;
tic("MLE time")
xTrain<- bikeTrV(-c[115])
p_error<- 100000;
tic("MLE time")
xTrain<- bikeTrV[-c(115)]
yTrain<- bikeTrv[c(115)]
XtXtrain<- (t(xTrain))%*%xTrain;
wMLE <- (ginv(XtXtrain))%*%(t(xTrain))%*%yTrain;
bikeTrV <- processedData[ trainIndex,]
bikeTest  <- processedData[-trainIndex,]
xTest <- data.matrix(bikeTest[-c(115)])
yTest <- data.matrix(bikeTest[c(115)])
p_error<- 100000;
tic("MLE time")
xTrain<- bikeTrV[-c(115)]
yTrain<- bikeTrv[c(115)]
yTrain<- bikeTrV[c(115)]
XtXtrain<- (t(xTrain))%*%xTrain;
processedData$cnt <- log10(processedData$cnt+1)
set.seed(111)
trainIndex <- createDataPartition(processedData$cnt, p = .9, list = FALSE, times = 1)
bikeTrV <- processedData[ trainIndex,]
bikeTest  <- processedData[-trainIndex,]
xTest <- data.matrix(bikeTest[-c(115)])
yTest <- data.matrix(bikeTest[c(115)])
p_error<- 100000;
tic("MLE time")
xTrain<- bikeTrV[-c(115)]
yTrain<- bikeTrV[c(115)]
XtXtrain<- (t(xTrain))%*%xTrain;
wMLE <- (ginv(XtXtrain))%*%(t(xTrain))%*%yTrain;
rm(list = ls());
cat("\014")
graphics.off()
library(readr)
library(ggplot2)
library(rstudioapi)
library(Metrics)
library(dplyr)
library(ggExtra)
library(corrplot)
library(MASS)
library(datasets)
library(caret)
library(tidyr)
library(tictoc)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
rawData<- read_csv("hour.csv")
processedData<-rawData
processedData$weeknum<-week(processedData$dteday)
processedData$dteday<- NULL
processedData<-processedData[,c(1,17,2:16)]
for(i in unique(processedData$season)) {
processedData[[paste0("season_",i)]] <- ifelse(processedData$season==i,1,0)
}
for(i in unique(processedData$weekday)) {
processedData[[paste0("weekday_",i)]] <- ifelse(processedData$weekday==i,1,0)
}
for(i in unique(processedData$weathersit)) {
processedData[[paste0("weathersit_",i)]] <- ifelse(processedData$weathersit==i,1,0)
}
for(i in unique(processedData$mnth)) {
processedData[[paste0("mnth_",i)]] <- ifelse(processedData$mnth==i,1,0)
}
for(i in unique(processedData$hr)) {
processedData[[paste0("hour_",i)]] <- ifelse(processedData$hr==i,1,0)
}
for(i in unique(processedData$weekday)) {
processedData[[paste0("weekday_",i)]] <- ifelse(processedData$weekday==i,1,0)
}
for(i in unique(processedData$weeknum)) {
processedData[[paste0("weeknum_",i)]] <- ifelse(processedData$weeknum==i,1,0)
}
processedData$weeknum<-pmin(abs(3-processedData$weeknum),56-processedData$weeknum);
processedData$mnth<-pmin(abs(1-processedData$mnth),13-processedData$mnth);
processedData$hr<-pmin(abs(4-processedData$hr),28-processedData$hr);
processedData$weeknum<-processedData$weeknum/max(processedData$weeknum)
processedData$mnth<-processedData$mnth/max(processedData$mnth)
processedData$hr<- processedData$hr/max(processedData$hr)
processedData<- processedData[c(1:16, 18:121,17)]
processedData<- processedData[-c(1,3,8,10,15,16)]
processedData$cnt <- log10(processedData$cnt+1)
set.seed(111)
trainIndex <- createDataPartition(processedData$cnt, p = .9, list = FALSE, times = 1)
bikeTrV <- processedData[ trainIndex,]
bikeTest  <- processedData[-trainIndex,]
xTest <- data.matrix(bikeTest[-c(115)])
yTest <- data.matrix(bikeTest[c(115)])
bikeTrainingValidation <- processedData[ trainIndex,]
bikeTest  <- processedData[-trainIndex,]
xTest <- data.matrix(bikeTest[-c(115)])
yTest <- data.matrix(bikeTest[c(115)])
p_error<- 100000;
tic("MLE time")
xTrain<- bikeTrainingValidation[-c(115)]
yTrain<- bikeTrainingValidation[c(115)]
XtXtrain<- (t(xTrain))%*%xTrain;
p_error<- 100000;
tic("MLE time")
xTrain<- data.matrix(bikeTrainingValidation[-c(115)])
yTrain<- data.matrix(bikeTrainingValidation[c(115)])
XtXtrain<- (t(xTrain))%*%xTrain;
wMLE <- (ginv(XtXtrain))%*%(t(xTrain))%*%yTrain;
ymle_est= xTest%*%wMLE;
toc()
yTest<- 10^(yTest)-1
ymle_est<- 10^(ymle_est)-1
MLE_MSE= mse(ymle_est,yTest)
MLE_correlation= cor(yTest,ymle_est)
R2mle <- 1 - (sum((yTest-ymle_est )^2)/sum((yTest-mean(yTest))^2))
meanMLEerror<- mean(testresults$MLEerror)
medianMLEerror<- median(testresults$MLEerror)
median(yTest-ymle_est)
yTest<- 10^(yTest)-1
ymle_est<- 10^(ymle_est)-1
ymap_est<- 10^(ymap_est)-1
source('~/Machine Learning/Bikesharing-prediction-ML-Regression/Bike regression script.R', echo=TRUE)
source('~/Machine Learning/Bikesharing-prediction-ML-Regression/Bike regression script.R', echo=TRUE)
ggplot(testresults,aes(ymle_est,yTest))+
geom_point(alpha=0.27, color='violet')+
geom_smooth(method='lm')
ggplot(testresults,aes(ymle_est,yTest))+
geom_point(alpha=0.37, color='violet')+
geom_smooth(method='lm')
ggplot(testresults,aes(ymap_est,yTest))+
geom_point(alpha=0.37, color='orange')+
geom_smooth(method='lm')
i=1:100
ytest_s=yTest[i]
ymle_s=ymle_est[i]
ymap_s=ymap_est[i]
df <- data.frame(ytest_s, ymle_s, ymap_s, i)
df.plot <- df %>%
gather(predictions, value, -c("i"))
ggplot(df.plot, aes(x=i, y=value, color=predictions)) +
geom_line( size=0.9)
i=1:100
ytest_s=yTest[i]
yMLE_s=yMLE_est[i]
yMAP_s=yMAP_est[i]
source('~/Machine Learning/Bikesharing-prediction-ML-Regression/Bike regression script.R', echo=TRUE)
